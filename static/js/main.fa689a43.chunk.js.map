{"version":3,"sources":["components/TodoForm.jsx","components/Dropdown.jsx","components/TodoListItem.jsx","components/TodoList.jsx","App.jsx","reportWebVitals.ts","index.jsx"],"names":["TodoForm","addTodo","useState","newTodo","setNewTodo","className","type","value","placeholder","onChange","e","target","onClick","preventDefault","Dropdown","icon","options","isOpen","setIsOpen","map","option","color","TodoListItem","todo","toggleComplete","onRemoveTodo","editTodo","isEditOn","setIsEditOn","text","inputText","setInputText","dropdownOptions","console","log","prev","complete","checked","id","onTodoUpdate","TodoList","todos","App","JSON","parse","localStorage","getItem","setTodos","useEffect","setItem","stringify","Date","now","selectedTodo","updatedTodos","todoToRemove","filter","todoToEdit","todoToUpdateIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa689a43.chunk.js","sourcesContent":["import React, { useState, ChangeEvent, FormEvent } from 'react';\n\nexport const TodoForm = ({ addTodo }) => {\n  const [newTodo, setNewTodo] = useState(\"\");\n\n  const handleChange = (e) => {\n    setNewTodo(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addTodo(newTodo);\n    setNewTodo(\"\");\n  }\n\n  return (\n    <form className=\"todo-form\">\n      <input type=\"text\" value={newTodo} className=\"todo-input\" placeholder=\"Add a todo\" onChange={handleChange} />\n        <button type=\"submit\" className=\"todo-button\" onClick={handleSubmit}>\n          Add Todo\n        </button>\n    </form>\n  )\n};\n","import React, { useState } from \"react\";\nimport { BsThreeDotsVertical } from \"react-icons/bs\";\n\nexport const Dropdown = ({ icon, options }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n  return (\n    <div className=\"dropdown\">\n      <div className=\"dropdown-title\" onClick={toggleDropdown}>\n        <BsThreeDotsVertical />\n      </div>\n      {isOpen && (\n        <div className=\"dropdown-list-container\">\n          {options.map((option) => {\n            return (\n              <button\n              key={option.value}\n                onClick={() => option.onClick()}\n                className={`${option.color} dropdown-list-btn`}\n              >\n                {option.value}\n              </button>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Dropdown } from \"./Dropdown\";\n\n\nexport const TodoListItem = ({ todo, toggleComplete, onRemoveTodo, editTodo }) => {\n  const [isEditOn, setIsEditOn] = useState(false);\n  const [inputText, setInputText] = useState(todo.text);\n\n  const onDelete = () => {\n    onRemoveTodo(todo);\n  }\n\n  const onEdit = () => {\n    console.log('edit');\n    setIsEditOn(prev=>!prev)\n  }\n\n  const onTodoUpdate = (e) => {\n    let text = e.target.value;\n    setInputText(text);\n    editTodo(todo.id,text);\n  }\n\n  const dropdownOptions = [\n    {\n      value: \"Delete\",\n      onClick: onDelete,\n      color: \"red\",\n    },\n    {\n      value: \"Edit\",\n      onClick: onEdit,\n      color: \"blue\",\n    }\n  ]\n  return (\n    <li className={todo.complete? \"todo-row completed\" : \"todo-row\"}>\n      <label>\n      <input\n        type=\"checkbox\"\n        onChange={() => toggleComplete(todo)}\n        checked={todo.complete}\n        />\n        {isEditOn ? <input className=\"edit-input\" type=\"text\" value={inputText} onChange={(e) => onTodoUpdate(e)}/> : todo.text}\n      </label>\n      <Dropdown\n        options={dropdownOptions}\n      />\n    </li>\n  )\n}\n","import React from \"react\";\nimport { TodoListItem } from './TodoListItem';\nexport const TodoList = ({ todos, toggleComplete, onRemoveTodo, editTodo }) => {\n  return (\n    <ul>\n     {todos.map(todo => (\n       <TodoListItem\n          key={todo.text}\n          todo={todo}\n          toggleComplete={toggleComplete}\n          onRemoveTodo={onRemoveTodo}\n          editTodo={editTodo}\n        />\n     ))}\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { TodoForm } from './components/TodoForm';\nimport { TodoList } from './components/TodoList';\n\nfunction App() {\n  const [todos, setTodos] = useState(JSON.parse( localStorage.getItem('todo'))||[]);\n\n  const toggleComplete = selectedTodo => {\n    const updatedTodos = todos.map(todo => {\n      if (todo === selectedTodo) {\n        return { ...todo, complete: !todo.complete };\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  const addTodo = newTodo => {\n    if (newTodo !== \"\") {\n      setTodos([...todos, { text: newTodo, complete: false,id:Date.now() }]);\n    }\n  };\n\n  const removeTodo = todoToRemove => {\n    let updatedTodos = todos.filter(todo => todo.text != todoToRemove.text);\n    setTodos(updatedTodos);\n  }\n\n  const editTodo = (todoToEdit,text) => {\n    let todoToUpdateIndex = todos.map(todo => todo.id===todoToEdit?{...todo,text}:todo);\n    setTodos(todoToUpdateIndex);\n  }\n\n  useEffect(()=>{\n    localStorage.setItem(\"todo\",JSON.stringify(todos))\n  },[todos])\n\n  return (\n    <div className=\"todo-app\">\n      <header>\n        <h1>\n        Todo App\n        </h1>\n      </header>\n      <TodoForm addTodo={addTodo}/>\n      <TodoList todos={todos} toggleComplete={toggleComplete} onRemoveTodo={removeTodo} editTodo={editTodo}/>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}